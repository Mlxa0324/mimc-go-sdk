// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messaging-protobuf/xiaomi-mimc/src/main/proto/mimc.proto

/*
Package mimc is a generated protocol buffer package.

It is generated from these files:
	messaging-protobuf/xiaomi-mimc/src/main/proto/mimc.proto

It has these top-level messages:
	PullMessageRequest
	TopicMessage
	QueryAppinfoRequest
	Appinfo
	MIMCPacket
	MIMCPacketList
	MIMCPacketAck
	MIMCP2PMessage
	MIMCP2TMessage
	MIMCSequenceAck
	MIMCPull
	MIMCUser
	MIMCGroup
*/
package mimc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MIMC_MSG_TYPE int32

const (
	MIMC_MSG_TYPE_P2P_MESSAGE  MIMC_MSG_TYPE = 1
	MIMC_MSG_TYPE_P2T_MESSAGE  MIMC_MSG_TYPE = 2
	MIMC_MSG_TYPE_SEQUENCE_ACK MIMC_MSG_TYPE = 3
	MIMC_MSG_TYPE_PACKET_ACK   MIMC_MSG_TYPE = 4
	MIMC_MSG_TYPE_PULL         MIMC_MSG_TYPE = 5
	MIMC_MSG_TYPE_COMPOUND     MIMC_MSG_TYPE = 6
)

var MIMC_MSG_TYPE_name = map[int32]string{
	1: "P2P_MESSAGE",
	2: "P2T_MESSAGE",
	3: "SEQUENCE_ACK",
	4: "PACKET_ACK",
	5: "PULL",
	6: "COMPOUND",
}
var MIMC_MSG_TYPE_value = map[string]int32{
	"P2P_MESSAGE":  1,
	"P2T_MESSAGE":  2,
	"SEQUENCE_ACK": 3,
	"PACKET_ACK":   4,
	"PULL":         5,
	"COMPOUND":     6,
}

func (x MIMC_MSG_TYPE) Enum() *MIMC_MSG_TYPE {
	p := new(MIMC_MSG_TYPE)
	*p = x
	return p
}
func (x MIMC_MSG_TYPE) String() string {
	return proto.EnumName(MIMC_MSG_TYPE_name, int32(x))
}
func (x *MIMC_MSG_TYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MIMC_MSG_TYPE_value, data, "MIMC_MSG_TYPE")
	if err != nil {
		return err
	}
	*x = MIMC_MSG_TYPE(value)
	return nil
}
func (MIMC_MSG_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// xmq --> seq-msg-storage
type PullMessageRequest struct {
	Uuid             *uint64 `protobuf:"varint,1,req,name=uuid" json:"uuid,omitempty"`
	Resource         *string `protobuf:"bytes,2,req,name=resource" json:"resource,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PullMessageRequest) Reset()                    { *m = PullMessageRequest{} }
func (m *PullMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*PullMessageRequest) ProtoMessage()               {}
func (*PullMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PullMessageRequest) GetUuid() uint64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *PullMessageRequest) GetResource() string {
	if m != nil && m.Resource != nil {
		return *m.Resource
	}
	return ""
}

type TopicMessage struct {
	TopicId          *uint64     `protobuf:"varint,1,req,name=topicId" json:"topicId,omitempty"`
	Packet           *MIMCPacket `protobuf:"bytes,2,req,name=packet" json:"packet,omitempty"`
	Uuid             *int64      `protobuf:"varint,3,opt,name=uuid" json:"uuid,omitempty"`
	Resource         *string     `protobuf:"bytes,4,opt,name=resource" json:"resource,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *TopicMessage) Reset()                    { *m = TopicMessage{} }
func (m *TopicMessage) String() string            { return proto.CompactTextString(m) }
func (*TopicMessage) ProtoMessage()               {}
func (*TopicMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TopicMessage) GetTopicId() uint64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func (m *TopicMessage) GetPacket() *MIMCPacket {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *TopicMessage) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *TopicMessage) GetResource() string {
	if m != nil && m.Resource != nil {
		return *m.Resource
	}
	return ""
}

// **AM*************************************
type QueryAppinfoRequest struct {
	AppId            *uint64 `protobuf:"varint,1,req,name=appId" json:"appId,omitempty"`
	Context          *string `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *QueryAppinfoRequest) Reset()                    { *m = QueryAppinfoRequest{} }
func (m *QueryAppinfoRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryAppinfoRequest) ProtoMessage()               {}
func (*QueryAppinfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryAppinfoRequest) GetAppId() uint64 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *QueryAppinfoRequest) GetContext() string {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return ""
}

type Appinfo struct {
	AppId                 *uint64 `protobuf:"varint,1,req,name=appId" json:"appId,omitempty"`
	MsgCallbackUrl        *string `protobuf:"bytes,2,opt,name=msgCallbackUrl" json:"msgCallbackUrl,omitempty"`
	OfflineMsgCallbackUrl *string `protobuf:"bytes,3,opt,name=offlineMsgCallbackUrl" json:"offlineMsgCallbackUrl,omitempty"`
	UuidTTL               *uint64 `protobuf:"varint,4,opt,name=uuidTTL" json:"uuidTTL,omitempty"`
	Context               *string `protobuf:"bytes,5,opt,name=context" json:"context,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *Appinfo) Reset()                    { *m = Appinfo{} }
func (m *Appinfo) String() string            { return proto.CompactTextString(m) }
func (*Appinfo) ProtoMessage()               {}
func (*Appinfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Appinfo) GetAppId() uint64 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *Appinfo) GetMsgCallbackUrl() string {
	if m != nil && m.MsgCallbackUrl != nil {
		return *m.MsgCallbackUrl
	}
	return ""
}

func (m *Appinfo) GetOfflineMsgCallbackUrl() string {
	if m != nil && m.OfflineMsgCallbackUrl != nil {
		return *m.OfflineMsgCallbackUrl
	}
	return ""
}

func (m *Appinfo) GetUuidTTL() uint64 {
	if m != nil && m.UuidTTL != nil {
		return *m.UuidTTL
	}
	return 0
}

func (m *Appinfo) GetContext() string {
	if m != nil && m.Context != nil {
		return *m.Context
	}
	return ""
}

// *
// MIMCPacket为packetv6中的payload
type MIMCPacket struct {
	PacketId         *string        `protobuf:"bytes,1,opt,name=packetId" json:"packetId,omitempty"`
	Package          *string        `protobuf:"bytes,2,opt,name=package" json:"package,omitempty"`
	Sequence         *int64         `protobuf:"varint,3,opt,name=sequence" json:"sequence,omitempty"`
	Type             *MIMC_MSG_TYPE `protobuf:"varint,4,opt,name=type,enum=MIMC_MSG_TYPE" json:"type,omitempty"`
	Payload          []byte         `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
	Timestamp        *int64         `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *MIMCPacket) Reset()                    { *m = MIMCPacket{} }
func (m *MIMCPacket) String() string            { return proto.CompactTextString(m) }
func (*MIMCPacket) ProtoMessage()               {}
func (*MIMCPacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MIMCPacket) GetPacketId() string {
	if m != nil && m.PacketId != nil {
		return *m.PacketId
	}
	return ""
}

func (m *MIMCPacket) GetPackage() string {
	if m != nil && m.Package != nil {
		return *m.Package
	}
	return ""
}

func (m *MIMCPacket) GetSequence() int64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *MIMCPacket) GetType() MIMC_MSG_TYPE {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MIMC_MSG_TYPE_P2P_MESSAGE
}

func (m *MIMCPacket) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MIMCPacket) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

// **************************下行消息************************
type MIMCPacketList struct {
	Uuid             *int64        `protobuf:"varint,1,opt,name=uuid" json:"uuid,omitempty"`
	Resource         *string       `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
	MaxSequence      *int64        `protobuf:"varint,3,opt,name=maxSequence" json:"maxSequence,omitempty"`
	Packets          []*MIMCPacket `protobuf:"bytes,4,rep,name=packets" json:"packets,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *MIMCPacketList) Reset()                    { *m = MIMCPacketList{} }
func (m *MIMCPacketList) String() string            { return proto.CompactTextString(m) }
func (*MIMCPacketList) ProtoMessage()               {}
func (*MIMCPacketList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MIMCPacketList) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *MIMCPacketList) GetResource() string {
	if m != nil && m.Resource != nil {
		return *m.Resource
	}
	return ""
}

func (m *MIMCPacketList) GetMaxSequence() int64 {
	if m != nil && m.MaxSequence != nil {
		return *m.MaxSequence
	}
	return 0
}

func (m *MIMCPacketList) GetPackets() []*MIMCPacket {
	if m != nil {
		return m.Packets
	}
	return nil
}

type MIMCPacketAck struct {
	PacketId         *string `protobuf:"bytes,1,opt,name=packetId" json:"packetId,omitempty"`
	Uuid             *int64  `protobuf:"varint,2,opt,name=uuid" json:"uuid,omitempty"`
	Resource         *string `protobuf:"bytes,3,opt,name=resource" json:"resource,omitempty"`
	Sequence         *int64  `protobuf:"varint,4,opt,name=sequence" json:"sequence,omitempty"`
	Timestamp        *int64  `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Package          *string `protobuf:"bytes,6,opt,name=package" json:"package,omitempty"`
	ErrorMsg         *string `protobuf:"bytes,7,opt,name=errorMsg" json:"errorMsg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MIMCPacketAck) Reset()                    { *m = MIMCPacketAck{} }
func (m *MIMCPacketAck) String() string            { return proto.CompactTextString(m) }
func (*MIMCPacketAck) ProtoMessage()               {}
func (*MIMCPacketAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MIMCPacketAck) GetPacketId() string {
	if m != nil && m.PacketId != nil {
		return *m.PacketId
	}
	return ""
}

func (m *MIMCPacketAck) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *MIMCPacketAck) GetResource() string {
	if m != nil && m.Resource != nil {
		return *m.Resource
	}
	return ""
}

func (m *MIMCPacketAck) GetSequence() int64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *MIMCPacketAck) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *MIMCPacketAck) GetPackage() string {
	if m != nil && m.Package != nil {
		return *m.Package
	}
	return ""
}

func (m *MIMCPacketAck) GetErrorMsg() string {
	if m != nil && m.ErrorMsg != nil {
		return *m.ErrorMsg
	}
	return ""
}

// **************************上行消息************************
type MIMCP2PMessage struct {
	From             *MIMCUser `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To               *MIMCUser `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Payload          []byte    `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	IsStore          *bool     `protobuf:"varint,4,opt,name=isStore" json:"isStore,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *MIMCP2PMessage) Reset()                    { *m = MIMCP2PMessage{} }
func (m *MIMCP2PMessage) String() string            { return proto.CompactTextString(m) }
func (*MIMCP2PMessage) ProtoMessage()               {}
func (*MIMCP2PMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MIMCP2PMessage) GetFrom() *MIMCUser {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *MIMCP2PMessage) GetTo() *MIMCUser {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MIMCP2PMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MIMCP2PMessage) GetIsStore() bool {
	if m != nil && m.IsStore != nil {
		return *m.IsStore
	}
	return false
}

type MIMCP2TMessage struct {
	From             *MIMCUser  `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To               *MIMCGroup `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Payload          []byte     `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	IsStore          *bool      `protobuf:"varint,4,opt,name=isStore" json:"isStore,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *MIMCP2TMessage) Reset()                    { *m = MIMCP2TMessage{} }
func (m *MIMCP2TMessage) String() string            { return proto.CompactTextString(m) }
func (*MIMCP2TMessage) ProtoMessage()               {}
func (*MIMCP2TMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MIMCP2TMessage) GetFrom() *MIMCUser {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *MIMCP2TMessage) GetTo() *MIMCGroup {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MIMCP2TMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MIMCP2TMessage) GetIsStore() bool {
	if m != nil && m.IsStore != nil {
		return *m.IsStore
	}
	return false
}

type MIMCSequenceAck struct {
	Uuid             *int64  `protobuf:"varint,1,opt,name=uuid" json:"uuid,omitempty"`
	Resource         *string `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
	Sequence         *int64  `protobuf:"varint,3,opt,name=sequence" json:"sequence,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MIMCSequenceAck) Reset()                    { *m = MIMCSequenceAck{} }
func (m *MIMCSequenceAck) String() string            { return proto.CompactTextString(m) }
func (*MIMCSequenceAck) ProtoMessage()               {}
func (*MIMCSequenceAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MIMCSequenceAck) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *MIMCSequenceAck) GetResource() string {
	if m != nil && m.Resource != nil {
		return *m.Resource
	}
	return ""
}

func (m *MIMCSequenceAck) GetSequence() int64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

type MIMCPull struct {
	Uuid             *int64  `protobuf:"varint,1,opt,name=uuid" json:"uuid,omitempty"`
	Resource         *string `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MIMCPull) Reset()                    { *m = MIMCPull{} }
func (m *MIMCPull) String() string            { return proto.CompactTextString(m) }
func (*MIMCPull) ProtoMessage()               {}
func (*MIMCPull) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MIMCPull) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *MIMCPull) GetResource() string {
	if m != nil && m.Resource != nil {
		return *m.Resource
	}
	return ""
}

// **************************公共定义************************
type MIMCUser struct {
	AppId            *int64  `protobuf:"varint,1,opt,name=appId" json:"appId,omitempty"`
	AppAccount       *string `protobuf:"bytes,2,opt,name=appAccount" json:"appAccount,omitempty"`
	Uuid             *int64  `protobuf:"varint,3,opt,name=uuid" json:"uuid,omitempty"`
	Resource         *string `protobuf:"bytes,4,opt,name=resource" json:"resource,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MIMCUser) Reset()                    { *m = MIMCUser{} }
func (m *MIMCUser) String() string            { return proto.CompactTextString(m) }
func (*MIMCUser) ProtoMessage()               {}
func (*MIMCUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MIMCUser) GetAppId() int64 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *MIMCUser) GetAppAccount() string {
	if m != nil && m.AppAccount != nil {
		return *m.AppAccount
	}
	return ""
}

func (m *MIMCUser) GetUuid() int64 {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return 0
}

func (m *MIMCUser) GetResource() string {
	if m != nil && m.Resource != nil {
		return *m.Resource
	}
	return ""
}

type MIMCGroup struct {
	AppId            *int64 `protobuf:"varint,1,opt,name=appId" json:"appId,omitempty"`
	TopicId          *int64 `protobuf:"varint,2,opt,name=topicId" json:"topicId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MIMCGroup) Reset()                    { *m = MIMCGroup{} }
func (m *MIMCGroup) String() string            { return proto.CompactTextString(m) }
func (*MIMCGroup) ProtoMessage()               {}
func (*MIMCGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MIMCGroup) GetAppId() int64 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *MIMCGroup) GetTopicId() int64 {
	if m != nil && m.TopicId != nil {
		return *m.TopicId
	}
	return 0
}

func init() {
	proto.RegisterType((*PullMessageRequest)(nil), "PullMessageRequest")
	proto.RegisterType((*TopicMessage)(nil), "TopicMessage")
	proto.RegisterType((*QueryAppinfoRequest)(nil), "QueryAppinfoRequest")
	proto.RegisterType((*Appinfo)(nil), "Appinfo")
	proto.RegisterType((*MIMCPacket)(nil), "MIMCPacket")
	proto.RegisterType((*MIMCPacketList)(nil), "MIMCPacketList")
	proto.RegisterType((*MIMCPacketAck)(nil), "MIMCPacketAck")
	proto.RegisterType((*MIMCP2PMessage)(nil), "MIMCP2PMessage")
	proto.RegisterType((*MIMCP2TMessage)(nil), "MIMCP2TMessage")
	proto.RegisterType((*MIMCSequenceAck)(nil), "MIMCSequenceAck")
	proto.RegisterType((*MIMCPull)(nil), "MIMCPull")
	proto.RegisterType((*MIMCUser)(nil), "MIMCUser")
	proto.RegisterType((*MIMCGroup)(nil), "MIMCGroup")
	proto.RegisterEnum("MIMC_MSG_TYPE", MIMC_MSG_TYPE_name, MIMC_MSG_TYPE_value)
}

func init() {
	proto.RegisterFile("messaging-protobuf/xiaomi-mimc/src/main/proto/mimc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0x7f, 0xf2, 0x77, 0x93, 0x2f, 0x8d, 0xe6, 0xa3, 0xc2, 0x54, 0x80, 0x22, 0x23, 0x50,
	0x85, 0xd4, 0x44, 0x8a, 0x58, 0x20, 0x58, 0x85, 0xd4, 0xaa, 0xaa, 0xc6, 0xad, 0xeb, 0x38, 0x0b,
	0x16, 0x28, 0x72, 0xdd, 0x49, 0x64, 0xc5, 0xf6, 0x18, 0xff, 0x48, 0xed, 0x02, 0x58, 0xf3, 0x38,
	0x6c, 0x79, 0x05, 0x5e, 0x0a, 0xcd, 0xd8, 0xe3, 0xd8, 0xa1, 0xad, 0x08, 0xbb, 0x39, 0xf7, 0x7a,
	0xce, 0x3d, 0xf7, 0xdc, 0x99, 0x31, 0xbc, 0xf5, 0x71, 0x1c, 0xdb, 0x2b, 0x37, 0x58, 0x1d, 0x85,
	0x11, 0x49, 0xc8, 0x55, 0xba, 0x1c, 0xde, 0xb8, 0x36, 0xf1, 0xdd, 0x23, 0xdf, 0xf5, 0x9d, 0x61,
	0x1c, 0x39, 0x43, 0xdf, 0x76, 0x83, 0x21, 0xcb, 0x0e, 0x69, 0x6c, 0xc0, 0x96, 0xea, 0x31, 0x20,
	0x23, 0xf5, 0x3c, 0x9d, 0xed, 0xc7, 0x26, 0xfe, 0x9c, 0xe2, 0x38, 0x41, 0x08, 0xe4, 0x34, 0x75,
	0xaf, 0x15, 0xa1, 0x2f, 0x1e, 0xca, 0x26, 0x5b, 0xa3, 0x03, 0x68, 0x46, 0x38, 0x26, 0x69, 0xe4,
	0x60, 0x45, 0xec, 0x8b, 0x87, 0x2d, 0xb3, 0xc0, 0xea, 0x17, 0xe8, 0x58, 0x24, 0x74, 0x9d, 0x9c,
	0x06, 0x29, 0xd0, 0x48, 0x28, 0x3e, 0xe5, 0x14, 0x1c, 0xa2, 0x17, 0x50, 0x0f, 0x6d, 0x67, 0x8d,
	0x13, 0xc6, 0xd1, 0x1e, 0xb5, 0x07, 0xfa, 0xa9, 0x3e, 0x31, 0x58, 0xc8, 0xcc, 0x53, 0x45, 0x79,
	0xa9, 0x2f, 0x1c, 0x4a, 0x77, 0x94, 0x97, 0xfb, 0x42, 0xa5, 0xbc, 0x06, 0xff, 0x5f, 0xa6, 0x38,
	0xba, 0x1d, 0x87, 0xa1, 0x1b, 0x2c, 0x09, 0xef, 0xe2, 0x11, 0xd4, 0xec, 0x30, 0x2c, 0x34, 0x64,
	0x80, 0x6a, 0x73, 0x48, 0x90, 0xe0, 0x1b, 0x2a, 0x81, 0xf2, 0x70, 0xa8, 0xfe, 0x10, 0xa0, 0x91,
	0x53, 0xdc, 0xb3, 0xf7, 0x15, 0x74, 0xfd, 0x78, 0x35, 0xb1, 0x3d, 0xef, 0xca, 0x76, 0xd6, 0xf3,
	0xc8, 0xcb, 0x29, 0xb6, 0xa2, 0xe8, 0x0d, 0xec, 0x93, 0xe5, 0xd2, 0x73, 0x03, 0xac, 0x57, 0x3f,
	0x97, 0xd8, 0xe7, 0x77, 0x27, 0xa9, 0x32, 0xda, 0xaa, 0x65, 0x4d, 0x59, 0x87, 0xb2, 0xc9, 0x61,
	0x59, 0x73, 0xad, 0xaa, 0xf9, 0xa7, 0x00, 0xb0, 0x71, 0x90, 0xba, 0x94, 0x79, 0xc8, 0x94, 0x33,
	0x97, 0x38, 0xa6, 0x24, 0x74, 0x6d, 0xaf, 0x30, 0x6f, 0x3c, 0x87, 0x74, 0x57, 0x4c, 0x3d, 0x0b,
	0x1c, 0x9c, 0x7b, 0x5e, 0x60, 0xa4, 0x82, 0x9c, 0xdc, 0x86, 0x99, 0xe7, 0xdd, 0x51, 0x97, 0x8d,
	0x6b, 0xa1, 0xcf, 0x4e, 0x16, 0xd6, 0x47, 0x43, 0x33, 0x59, 0x2e, 0x63, 0xbe, 0xf5, 0x88, 0x7d,
	0xcd, 0xe4, 0x75, 0x4c, 0x0e, 0xd1, 0x53, 0x68, 0x25, 0xae, 0x8f, 0xe3, 0xc4, 0xf6, 0x43, 0xa5,
	0xce, 0xa8, 0x37, 0x01, 0xf5, 0xbb, 0x00, 0xdd, 0x8d, 0xf8, 0xa9, 0x5b, 0x39, 0x79, 0x77, 0x8f,
	0x5e, 0xac, 0x8e, 0x1e, 0xf5, 0xa1, 0xed, 0xdb, 0x37, 0xb3, 0xaa, 0xfa, 0x72, 0x08, 0xbd, 0xcc,
	0xda, 0xc6, 0x49, 0xac, 0xc8, 0x7d, 0x69, 0xfb, 0xc8, 0xf1, 0x9c, 0xfa, 0x4b, 0x80, 0xff, 0x36,
	0xf1, 0xb1, 0xb3, 0x7e, 0xd0, 0x4b, 0x2e, 0x53, 0xbc, 0x47, 0xa6, 0xb4, 0x25, 0xb3, 0xec, 0xb0,
	0xbc, 0xe5, 0x70, 0xc5, 0xa3, 0xda, 0x96, 0x47, 0xe5, 0xa9, 0xd5, 0xff, 0x98, 0x1a, 0x8e, 0x22,
	0x12, 0xe9, 0xf1, 0x4a, 0x69, 0x64, 0xf5, 0x38, 0x56, 0xbf, 0xe6, 0xc6, 0x8e, 0x0c, 0x7e, 0x25,
	0x9f, 0x81, 0xbc, 0x8c, 0x88, 0xcf, 0x3a, 0x69, 0x8f, 0x5a, 0xcc, 0x83, 0x79, 0x8c, 0x23, 0x93,
	0x85, 0xd1, 0x13, 0x10, 0x13, 0xc2, 0xda, 0xa9, 0x24, 0xc5, 0x84, 0x94, 0xa7, 0x2b, 0x55, 0xa7,
	0xab, 0x40, 0xc3, 0x8d, 0x67, 0x09, 0x89, 0xb2, 0xa6, 0x9a, 0x26, 0x87, 0xea, 0x37, 0x5e, 0xdf,
	0xfa, 0xcb, 0xfa, 0x07, 0xa5, 0xfa, 0xc0, 0x92, 0x27, 0x11, 0x49, 0xc3, 0x7f, 0x16, 0xf0, 0x09,
	0xf6, 0x28, 0x09, 0x3f, 0x05, 0x74, 0x9e, 0xbb, 0x1e, 0xad, 0x07, 0x6e, 0x85, 0xfa, 0x0e, 0x9a,
	0xac, 0xbf, 0xd4, 0xf3, 0x76, 0xe5, 0x55, 0xc3, 0x6c, 0x2f, 0x6d, 0xbe, 0xfc, 0xcc, 0xd0, 0xcd,
	0xf9, 0x33, 0xf3, 0x1c, 0xc0, 0x0e, 0xc3, 0xb1, 0xe3, 0x90, 0x34, 0xe0, 0xaf, 0x54, 0x29, 0xb2,
	0xf3, 0xfb, 0xf8, 0x1e, 0x5a, 0x85, 0xa3, 0xf7, 0x94, 0x2c, 0xbd, 0xd8, 0xd9, 0x99, 0xe6, 0xf0,
	0xf5, 0x3a, 0xbb, 0x17, 0xc5, 0x9d, 0x47, 0x7b, 0xd0, 0x36, 0x46, 0xc6, 0x42, 0xd7, 0x66, 0xb3,
	0xf1, 0x89, 0xd6, 0x13, 0xb2, 0x80, 0x55, 0x04, 0x44, 0xd4, 0x83, 0xce, 0x4c, 0xbb, 0x9c, 0x6b,
	0xe7, 0x13, 0x6d, 0x31, 0x9e, 0x9c, 0xf5, 0x24, 0xd4, 0x05, 0x30, 0xc6, 0x93, 0x33, 0xcd, 0x62,
	0x58, 0x46, 0x4d, 0x90, 0x8d, 0xf9, 0x74, 0xda, 0xab, 0xa1, 0x0e, 0x34, 0x27, 0x17, 0xba, 0x71,
	0x31, 0x3f, 0x3f, 0xee, 0xd5, 0x3f, 0x3c, 0x86, 0x7d, 0x87, 0xf8, 0x83, 0xec, 0xdf, 0x35, 0xd8,
	0xfc, 0xa7, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x54, 0x65, 0xf8, 0x0a, 0xe2, 0x06, 0x00, 0x00,
}
